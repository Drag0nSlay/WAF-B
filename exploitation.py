import requests
import pyperclip

def exploit_sql_injection(url, payload):
    try:
        response = requests.get(url + payload)
        if "SQL syntax" in response.text or "mysql_fetch" in response.text:
            return True, response.text
        return False, "No SQL error detected."
    except Exception as e:
        return False, f"Error: {e}"

def exploit_xss(url, payload):
    try:
        response = requests.get(url, params={"q": payload})
        if payload in response.text:
            return True, response.text
        return False, "XSS payload not reflected."
    except Exception as e:
        return False, f"Error: {e}"

def exploit_command_injection(url, payload):
    try:
        response = requests.get(url + payload)
        if "root:" in response.text or "command not found" in response.text:
            return True, response.text
        return False, "No command injection vulnerability detected."
    except Exception as e:
        return False, f"Error: {e}"

def exploit_path_traversal(url, payload):
    try:
        response = requests.get(url + payload)
        if "root:" in response.text or "No such file or directory" in response.text:
            return True, response.text
        return False, "No path traversal vulnerability detected."
    except Exception as e:
        return False, f"Error: {e}"

def exploit_file_upload(url, file_path):
    try:
        files = {"file": open(file_path, "rb")}
        response = requests.post(url, files=files)
        if response.status_code == 200:
            return True, "File uploaded successfully."
        return False, "File upload failed."
    except Exception as e:
        return False, f"Error: {e}"

def exploit_csrf(url, session):
    try:
        response = session.post(url)
        if response.status_code == 200:
            return True, "CSRF attack succeeded."
        return False, "CSRF attack failed."
    except Exception as e:
        return False, f"Error: {e}"

# Example usage: Adding a user input system
if __name__ == "__main__":
    # Get the target URL from the user
    test_url = input("Enter the target URL (e.g., http://example.com): ")
    
    # Provide a menu of payload options
    print("\nSelect the type of test to perform:")
    print("1. SQL Injection")
    print("2. XSS")
    print("3. Command Injection")
    print("4. Path Traversal")
    print("5. File Upload")
    print("6. CSRF")
    
    # Get the user's choice for the test
    choice = input("Enter the number corresponding to the test: ")

    # Function to handle the copy-paste feature for payloads
    def get_payload_from_clipboard():
        # Get the payload from clipboard if available
        payload = pyperclip.paste()
        if payload:
            print(f"Payload from clipboard: {payload}")
        else:
            print("No payload found in clipboard.")
        return payload

    if choice == "1":
        # SQL Injection Payload
        print("Enter a SQL injection payload or copy it to clipboard.")
        sql_payload = input("Enter payload manually or press Enter to use clipboard: ")
        if not sql_payload:  # If the user doesn't enter anything manually, use clipboard
            sql_payload = get_payload_from_clipboard()
        print(f"Testing SQL Injection with payload: {sql_payload}")
        result = exploit_sql_injection(test_url, sql_payload)
        print(result)

    elif choice == "2":
        # XSS Payload
        print("Enter an XSS payload or copy it to clipboard.")
        xss_payload = input("Enter payload manually or press Enter to use clipboard: ")
        if not xss_payload:
            xss_payload = get_payload_from_clipboard()
        print(f"Testing XSS with payload: {xss_payload}")
        result = exploit_xss(test_url, xss_payload)
        print(result)

    elif choice == "3":
        # Command Injection Payload
        print("Enter a Command Injection payload or copy it to clipboard.")
        command_payload = input("Enter payload manually or press Enter to use clipboard: ")
        if not command_payload:
            command_payload = get_payload_from_clipboard()
        print(f"Testing Command Injection with payload: {command_payload}")
        result = exploit_command_injection(test_url, command_payload)
        print(result)

    elif choice == "4":
        # Path Traversal Payload
        print("Enter a Path Traversal payload or copy it to clipboard.")
        path_payload = input("Enter payload manually or press Enter to use clipboard: ")
        if not path_payload:
            path_payload = get_payload_from_clipboard()
        print(f"Testing Path Traversal with payload: {path_payload}")
        result = exploit_path_traversal(test_url, path_payload)
        print(result)

    elif choice == "5":
        # File Upload
        file_path = input("Enter the file path for upload (e.g., malicious.txt): ")
        print(f"Testing File Upload with file: {file_path}")
        result = exploit_file_upload(test_url, file_path)
        print(result)

    elif choice == "6":
        # CSRF Attack (Requires authenticated session)
        print("CSRF testing requires an authenticated session. Please provide session management.")
        result = exploit_csrf(test_url, None)  # Placeholder for actual session
        print(result)

    else:
        print("Invalid choice. Please select a valid option.")